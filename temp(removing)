package test;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Arrays;  

public class ElevatorSubsystemTests {
	 private TestHost host;
	    
	    @BeforeEach
	    void setUp() throws Exception {
	        host = new TestHost(1);
	    }
	    
	    @AfterEach
	    void tearDown() throws Exception {
	        host.teardown();
	        host = null;
	    }

	@Test
	public void testSendReceiveData()
	{
		Elevator elevator = new Elevator();
		
		host.setExpectedNumMessages(1);
        Thread t = new Thread(host);
        t.start();
        
        elevator.sendData(new byte[] { 0x20, 0x20, 0x20 },
        				  InetAddress.getLocalHost(),
        				  UtilityInformation.SCHEDULER_PORT_NUM
        				  );
        
        System.out.println("Finished");
	}
}

	
	
	/*
	

    
	}
	public ElevatorSubsystemTest() {
		try {
			schedulerIP = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			// Construct a Datagram socket and bind it to any available port on the local
			// host machine. This socket will be used to
			// send UDP Datagram packets.
			sendSocket = new DatagramSocket();

			// Construct a Datagram socket and bind it to port 420 (the Scheduler) on the
			// local host machine. This socket will be used to
			// receive UDP Datagram packets.
			receiveSocket = new DatagramSocket(UtilityInformation.ELEVATOR_PORT_NUM);
		} catch (SocketException se) {
			se.printStackTrace();
			System.exit(1);
		}
	}
	
	public byte[] receiveDataTest() {        
        // Initialize the DatagramPacket used to receive requests
        byte data[] = new byte[100];
        receivePacket = new DatagramPacket(data, data.length);
       
        System.out.println("Test: Waiting for Packet.\n");
    
        // Wait on the DatagramSocket to receive a request
        try {        
            System.out.println("Test: Waiting...");
            receiveSocket.receive(receivePacket);
        } catch (IOException e) {
            System.out.print("Test: IO Exception: likely:");
            System.out.println("Test: Receive Socket Timed Out.\n" + e);
            e.printStackTrace();
            System.exit(1);
        }
    
        // Print out information about the received packet
        System.out.println("Test: Packet received:");
        System.out.println("Test: To address: " + receivePacket.getAddress());
        System.out.println("Test: To port: " + receivePacket.getPort());
        int len = receivePacket.getLength();
        System.out.println("Test: Length: " + len);
        System.out.print("Test: Containing (as bytes): ");
        System.out.println(Arrays.toString(data) + "\n");
        return data;
    }
	
	public static void main(String[] args) {
		// for now we only have one elevator
		ElevatorSubsystemTest elevatorTest = new ElevatorSubsystemTest();
		for (;;) {
			// always wait for a message from the scheduler
			elevatorTest.receiveDataTest();
		}
	}
	
	*/
